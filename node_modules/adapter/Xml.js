var Result = require('./Result');
var Errors = require('./Errors');

var xml2js = require('xml2js');
var data2xml = require('data2xml');

var Xml = function() {
}

Xml.prototype.replace = function(where, what, by_what) {
    //console.log(arguments);

    var re = new RegExp("(.*)\%"+what+"\%(.*)","g");

    if (where.search(re) != -1) {
        var newstr = where.replace(re, ("$1"+by_what+"$2") );
        if(where != newstr) {
            return newstr;
        }
    }

    return where;
}

Xml.prototype.to_object = function(xml, h){
    var ret = new Result(h, arguments, 'Xml.prototype.to_object');

    if(!xml){
        ret.error(Errors.xml.empty_xml);
        return;
    }

    var p = new xml2js.Parser();
    p.parseString(xml, ret.checkError(Errors.xml.to_object));

    //p.parseString(xml, h);
}

// удаляет знаки табуляции
Xml.prototype.no_spaces = function(xml){
    xml = xml.replace(/[\n|\r|\t]+/g, '');
    xml = xml.replace(/> +/g, '>');
    xml = xml.replace(/ +/g, ' ');

    return xml;
}

Xml.prototype.change_parameter = function(original_xml, xml_attr, xml_val) {
    //console.log(arguments);
    var re = new RegExp('(.*'+xml_attr+'=")([^"]+|.?)(".*)','');
    return original_xml.replace(re, '$1'+xml_val+'$3' );
}

Xml.prototype.get_parameter = function(original_xml, xml_attr) {
    //if(!original_xml || (''==original_xml)) return '';
    //if(!xml_attr || (''==xml_attr)) return '';

    var re = new RegExp('(.*'+xml_attr+'=")([^"]+|.?)(".*)','');
    return original_xml.match(re)[2];
}

Xml.prototype.from_object = function(nm, obj, h) {
    var ret = new Result(h, arguments, 'Xml.prototype.from_object');

    var t, e, r;
    try {
        t = JSON.stringify( obj );
        t = t.replace(/@/g, '_attr');
        t = JSON.parse(t);
        r = data2xml(nm, t);
    } catch(ce){
        e = ce;
    }

    if(e){
        ret.error(Errors.xml.from_object, e);
        return;
    }

    if(!r){
        ret.error(Errors.xml.empty_xml);
        return;
    }

    ret.result(r);
}

module.exports = new Xml();