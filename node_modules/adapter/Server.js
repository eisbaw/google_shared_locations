var http = require('http');
var events = require('events');
var util = require('util');

var Result = require('./Result');
var Errors = require('./Errors');

var Server = function() {
    events.EventEmitter.call(this);
    this.error = function(e, sid){
        console.log(sid+': Server.error: '+ (e.message||e.msg));
        this.emit('error', e, sid);
    }

    this.result = function(o){
        console.log('12');
        this.emit('result', o);
    }

    this.critical = function(e, sid){
        console.log('qw12');
        this.emit('critical', e, sid);
    }

    this.responses = {};

    // это нужно чтоб сервер сам по себе не тух
    this.http = http;
}
util.inherits(Server, events.EventEmitter);

Server.prototype.start = function(host, port){
    // init logger
    // init dao
    // init memcached

    var server_process = process;

    this.last_sid = 0;

    var parent = this;

    parent.http.createServer( function(request, response) {
        if(-1!=request.url.indexOf('/favicon.ico')){
            response.end();
            return;
        }

        var session = {
            'id' : parent.last_sid++,
            'start_time' : new Date(),
            'client' : {
                'request' : ''
            }
        }
        console.log(session['id']+' begin');

        parent.responses[session['id']]=response;

        function f_result(e,o){
            if(e){
                parent.error(e, session['id']);
            } else {
                parent.request(o);
            }
        }
        var ret = new Result(f_result, arguments, 'Server.prototype.start');

        var chunks = new Buffer("");

        request.on('data', function(chunk) {
            chunks = Buffer.concat([ new Buffer(chunk) ]);
        });

        request.on('error', function(e) {
            ret.error(Errors.server.error, e);
        });

        throw('bla error1');

        request.on('end', function() {
            //throw('bla error2');

            // Сразу ответим хоть что-то а то клиент может отавлиться по
            // curl return
            // 23
            response.writeHead(200, {
                "Content-Type" : "text/xml"
            });

            if(0==chunks.length){
                ret.error(Errors.server.empty_request);
                return;
            }

            session['client']['request'] = chunks.toString();
            ret.result(session);
        } );

        server_process.on('uncaughtException', function() {
            //console.log('server_process.on(uncaughtException');
            //console.log(arguments);
            ret.error(Errors.server.uncaught_expt, {'error' : arguments, 'session' : session['id']});
        });
    }).listen(port, host);
}

// проверяем а не отпал ли клиент
Server.prototype.verify_connection = function(sid){
    //return this.responses[sid]['socket']['_handle'];
    return this.responses[sid]['socket']['writable'];
}

Server.prototype.send_response = function(sid, xml){
    var self = this;

    if(self.responses[sid]){
        if(self.verify_connection(sid)){
            self.responses[sid].write(xml);
            self.responses[sid].end();
        } else {
            //self.error(Errors.server.disconnected, sid);
            self.critical(Errors.server.disconnected, sid);
        }

        delete self.responses[sid];
    } else {
        self.critical(Errors.server.bad_sid, sid);
    }

    //console.log(this.responses);
}

process.on('uncaughtException', function(e) {
    // сюда попадем только тогда когда у нас внутри http.createServer что-то не то
    console.log('Server: process.on->uncaughtException: %j', arguments);
    //console.log(arguments);

    //this.emit('critical', Errors.server.uncaught_expt);
    //this.critical(Errors.server.uncaught_expt, -1);

    //parent.error('vobla');
    //ret.error(Errors.server.unhandeled_exeption, {'error' : arguments, 'session' : self.cur_sid});
    srv.critical(Errors.server.uncaught_expt, -1);
});

var srv = new Server();

module.exports = srv;
