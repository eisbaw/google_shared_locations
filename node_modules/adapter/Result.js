var Errors = require('./Errors');

function AdapterResult(callback, args, method){
    //console.log(method);

    if(args) this.args = args;
    if(method) this.method = method;
    if(callback) this.callback = callback;
}

var createError = function(self, errCode, errOrigin){
    /*
     console.log('0==========');
     console.log(arguments.callee.name);
     console.log('1==========');
     console.log(arguments);
     console.log('2==========');
     */

    var ret;

    if(!errCode) {
        console.log('*************>>');
        console.log( arguments );
        console.log( (new Error()).stack );
        console.log('<<*************');
    }

    // debug
    if(errOrigin)if(errOrigin.stack){
        console.log(errOrigin.stack);
    }

    if(!errCode) errCode = Errors.unknown;
    if(!errCode.code) errCode = Errors.unknown;

    if(errCode.code == Errors.inner.code){
        ret = errOrigin;
    } else {
        ret = {
            'code': errCode.code,
            'message': errCode.msg,
            'error': new Error(errCode.msg),
            'parent': errOrigin,
            'args': self.args,
            'method': self.method,
            'dsc': (errOrigin||{}).message
        };
    }

    return ret;
}

AdapterResult.prototype.checkError = function(ifErrorCode, ifOkFunction, ifFailFunction){
    //console.log(arguments);

    var checkErrorBody = function(self, err_code, ok, fail, e, o){
        if(e){
            if(fail){
                fail( createError(self, err_code, e) );
            } else {
                self.error(err_code, e);
            }
        } else {
            if(ok){
                ok(o);
            } else {
                self.result(o);
            }
        }
    }

    var f = new Function('self', 'err_code', 'ok', 'fail',
        'var f_body = ' + checkErrorBody.toString() + '; ' +
        'var createError = ' + createError.toString() + '; ' +
        'var Errors = ' + JSON.stringify(Errors) + '; ' +
        //'return function(e,o){ console.log(e||o); return f_body(self, err_code, ok, fail, e, o); }'
        'return function(e,o){ return f_body(self, err_code, ok, fail, e, o); }'
    );

    return f(this, ifErrorCode, ifOkFunction, ifFailFunction);
}

AdapterResult.prototype.result = function(o){
    //console.log(this.method + ' - DONE');

    this.callback(null, o);
}

AdapterResult.prototype.error = function(e, parent){
    //console.log(this.method + ' - ERROR');

    var self = this;
    self.callback( createError(self, e, parent) );
}

module.exports = AdapterResult;
